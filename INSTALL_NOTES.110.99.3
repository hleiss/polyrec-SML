Installation guide for Poly Rec under SML/NJ Version 110.99.3 
-------------------------------------------------------------

1. You need SML/NJ Version 110.99.3 with compilation manager CMB.

   Follow the instructions in https://github.com/smlnj/legacy/README.md
   and clone smlnj-110.99.3 into your directory $ROOT

      > git clone git@github.com:smlnj/legacy.git $ROOT

   To get the Bootstrap Compilation Manager (structure CMB) installed,
   edit $ROOT/config/preloads and uncomment #autoload $smlnj/cmb.cm:

      # The Bootstrap Compilation Manager (structure CMB)
      autoload $smlnj/cmb.cm

   Go to $ROOT and install the compiler from the sources (steps 2.,3.,5.
   of https://github.com/smlnj/legacy/README.md).

      > cd $ROOT
      $ROOT> config/install.sh
      $ROOT> cd base/system
      base/system> ./cmb-make ../../bin/sml
      base/system> ./makeml
      base/system> ./installml
      base/system> cd ../..
      $ROOT> config/install.sh

   You now have bin- and boot-directories in $ROOT/base/system depending on your machine's
   architecture and operating system, like 

            sml.bin.amd64-unix
            sml.boot.amd64-unix

   for x86_64 architecture and Unix/Linux system. (Specific names as these are used below.)

   Moreover, a heap image is in $ROOT/bin/.heap/ and a runtime system in $ROOT/bin/.run/,
   which we will replace below, and files in $ROOT/lib (of which pathconfig will be
   modified).

2. Clone the polyrec-SML repository to a sibling directory of your $ROOT directory:

      $ROOT> cd ..
      > git clone https://github.com/hleiss/polyrec-SML.git polyrec-SML

   This file should now be

            polyrec-SML/INSTALL_NOTES.110.99.3

3. Go to the root directory of the compiler:

      > cd $ROOT/base/compiler/

   Save the file core.cm describing how to build the original compiler

      base/compiler> cp -p core.cm core.cm.orig

   and replace it by the one in polyrec-SML:

      base/compiler> cp ../../../polyrec-SML/core.polyrec.cm core.cm
        
   [This amounts to replace lines in core.cm as follows:
     TopLevel/main/control.sig  =>  ../../../polyrec-SML/control.polyrec.sig
     TopLevel/main/control.sml  =>  ../../../polyrec-SML/control.polyrec.sml

    You may edit core.polyrec.cm to also make the replacement
     FLINT/opt/specialize.sml   =>  ../../../polyrec-SML/specialize.polyrec.sml
    to make Example5 of polyrec-SML/examples.sml work.]

4. Save the file describing how to build the original elaborator:

      base/compiler> cp -p Elaborator/elaborate.cm Elaborator/elaborate.cm.orig
        
   and replace it by the modification in polyrec-SML:
   
      base/compiler> cp ../../../polyrec-SML/elaborate.polyrec.cm Elaborator/elaborate.cm

   (This is to ignore Elaborator/control/elabcontrol.sml|sig and instead use
    elabcontrol.polyrec.sml|sig and other files provided in polyrec-SML/, and adds
    Semiunify:SEMIUNIFY and PPTypelist:PPTYPELIST to the Group of elaborator modules.)

5. From the sources as modified in 3. and 4., build new bin- and boot-files with
   prefix "sml-pr" (or another one different from "sml"):

        base/system> ./makeml -rebuild sml-pr

   For architecture amd64 on linux, these are in subdirectories (of base/system) named
   
            sml-pr.bin.amd64-unix        [22M]
            sml-pr.boot.amd64-unix       [18M]

6. From these, make a heap image and library files with name "sml-pr" by

        base/system> ./makeml -boot sml-pr.boot.amd64-unix -o sml-pr

   For a linux system, these are called

            sml-pr.amd64-linux
            sml-pr.lib

   This call to ./makeml ends in showing the banner of the new runtime system

            SML of New Jersey [Poly Rec] (64-bit) v110.99.3 [built: <date>]

   [ To test the new system, you can run

        base/system> ./testml -load sml-pr

     The system shows [Poly Rec] in the banner and lets you switch type checking:

        (SML/NJ)- Control.usepoly();
        (SML/NJ)+ Control.usemono();  (* the prompt + indicating PolyRec *)

     Leave SML/NJ by typing ^D (ctrl D).  ]   

7. Install the modified compiler by

        base/system> ./installml -clean sml-pr

   This replaces original files in $ROOT/bin/.heap and $ROOT/lib by the new heap image and
   library files and updates the runtime system in $ROOT/bin/.run. A symbolic link
   $ROOT/bin/sml (not $ROOT/bin/sml-pr !) to the new runtime system is automatically installed.

8. There is a manual polyrec-SML/doc/USER_MANUAL explainig how to switch between the type
   systems or how to inspect type inference in Poly Rec. It was written for smlnj-110.0.3.
   Notice the following slight differences for smlnj-110.99.3:

        a. the default type checker in $ROOT/bin/sml is that of Standard ML of New Jersey,
           indicated by the - promt and using monomorphic recursion.
        b. To switch to type checking with polymorphic recursion, use
             - Control.usepoly();
           This also switches to the + prompt. To go back, use
             + Control.usemono();
        c. To inspect the semiunification constraint solving, you have to use

              Control.Elab.viewsemi  instead of  Compiler.Control.CG.viewsemi 
              Control.Elab.showsemi  instead of  Compiler.Control.CG.showsemi

        d. Error messages of smlnj-110.99.3 are slightly different from those of
           smlnj-110.0.3 in the USER_MANUAL.

9. If you want to replace the modified compiler by the original one, you can overwrite
   the modified .cm files by their original versions:

	base/compiler> cp -p core.cm.orig core.cm
	base/compiler> cp -p Elaborator/elaborate.cm.orig Elaborator/elaborate.cm

   and recompile the compiler from the boot directory of the original system

        base/compiler> cd ../system        
        base/system> ./makeml -boot sml.boot.amd64-unix   
        base/system> ./installml -clean sml
   
Hans Leiss, Mo 19. Jun 19:16:10 CEST 2023



